{"version":3,"sources":["services/storage.service.js","services/rates.service.js","components/CircularIndeterminate.js","components/RateRows.js","pages/RatesTable.js","App.js","serviceWorker.js","index.js"],"names":["storageService","store","key","any","localStorage","JSON","stringify","load","str","parse","baseUrl","KEY","gRates","_createRates","dataRefresher","setInterval","getRates","a","rates","length","lastUpdate","Date","console","log","axios","get","then","res","data","catch","error","ratesService","query","useStyles","makeStyles","theme","root","display","marginLeft","marginTop","spacing","CircularIndeterminate","classes","className","CircularProgress","tableCell","fontSize","color","RateRows","props","rows","page","rowsPerPage","slice","map","row","TableRow","currency","TableCell","rate","bid","ask","high","low","open","close","timestamp","table","minWidth","tableHead","backgroundColor","tableBody","active","canceled","RatesTable","React","useState","setRows","setPage","setRowsPerPage","getRows","TableContainer","component","Paper","Table","size","aria-label","TableHead","TableBody","TablePagination","rowsPerPageOptions","count","onChangePage","event","newPage","onChangeRowsPerPage","parseInt","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2d4cd65e.chunk.js","sourcesContent":["function store(key, any) {\r\n    localStorage[key] = JSON.stringify(any);\r\n}\r\n\r\nfunction load(key) {\r\n    var str = localStorage[key] || 'null';\r\n    return JSON.parse(str);\r\n}\r\n\r\nexport const storageService = {\r\n    store,\r\n    load\r\n}","import axios from 'axios';\r\nimport { storageService } from './storage.service';\r\n\r\nconst baseUrl = 'https://www.live-rates.com/rates';\r\nconst KEY = 'ratesDB'\r\nlet gRates = _createRates();\r\n// let gRates = require('../data/rates.json');\r\n\r\nvar myInter;\r\n\r\nfunction dataRefresher() {\r\n    myInter = setInterval(getRates, 1000 * 60 * 20)\r\n}\r\n\r\nasync function _createRates() {\r\n    let rates = storageService.load(KEY)\r\n    if (!rates || !rates.length) {\r\n        rates = await getRates();\r\n        dataRefresher();\r\n    }\r\n    return rates;\r\n}\r\n\r\nasync function getRates() {\r\n    let lastUpdate = new Date();\r\n    console.log('GOT RATES AT: ', lastUpdate);\r\n    return await axios.get(baseUrl)\r\n        .then(res => {\r\n            const rates = res.data;\r\n            console.log('GOT RATES: ', rates);\r\n            if (rates.length > 1) storageService.store(KEY, rates);\r\n            return res.data;\r\n        })\r\n        .catch(error => console.error(error));\r\n}\r\n\r\nfunction query() {\r\n    return gRates;\r\n}\r\n\r\nexport const ratesService = {\r\n    getRates,\r\n    query\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        marginLeft: '670px',\r\n        marginTop: '100px',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n    },\r\n}));\r\n\r\nexport default function CircularIndeterminate() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CircularProgress />\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { TableRow, TableCell } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tableCell: {\r\n        fontSize: '10px',\r\n        color: '#cdd3d8',\r\n    }\r\n}));\r\n\r\nconst RateRows = (props) => {\r\n    const classes = useStyles();\r\n    const { rows, page, rowsPerPage } = props;\r\n\r\n    return (\r\n        rows\r\n            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n            .map((row) => (\r\n                <TableRow key={row.currency}>\r\n                    <TableCell className={classes.tableCell}>{row.currency}</TableCell>\r\n                    <TableCell className={classes.tableCell}>{row.rate}</TableCell>\r\n                    <TableCell className={classes.tableCell}>{row.bid}</TableCell>\r\n                    <TableCell className={classes.tableCell}>{row.ask}</TableCell>\r\n                    <TableCell className={classes.tableCell}>{row.high}</TableCell>\r\n                    <TableCell className={classes.tableCell}>{row.low}</TableCell>\r\n                    <TableCell className={classes.tableCell}>{row.open}</TableCell>\r\n                    <TableCell className={classes.tableCell}>{row.close}</TableCell>\r\n                    <TableCell className={classes.tableCell}>{row.timestamp}</TableCell>\r\n                </TableRow>\r\n            ))\r\n    );\r\n}\r\n\r\nexport default RateRows;","import React from 'react';\r\n\r\n// @material-ui/core components\r\nimport { Table, TableHead, TableRow, TableBody, TableCell, TableContainer, TablePagination } from \"@material-ui/core\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n// Services\r\nimport { ratesService } from '../services/rates.service';\r\n\r\n// Components\r\nimport CircularIndeterminate from '../components/CircularIndeterminate';\r\nimport RateRows from '../components/RateRows';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    table: {\r\n        minWidth: 480,\r\n    },\r\n    tableHead: {\r\n        backgroundColor: '#2F3B4B',\r\n\r\n    },\r\n    tableBody: {\r\n        backgroundColor: '#252C36',\r\n    },\r\n    tableCell: {\r\n        fontSize: '10px',\r\n        color: '#cdd3d8',\r\n    },\r\n    active: {\r\n        color: '#1dd120'\r\n    },\r\n    canceled: {\r\n        color: '#e81b37'\r\n    }\r\n\r\n}));\r\n\r\nexport default function RatesTable() {\r\n    const classes = useStyles();\r\n\r\n    const [rows, setRows] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(15);\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = event => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    async function getRows() {\r\n        let data = await ratesService.query();\r\n        setRows(data);\r\n    }\r\n\r\n    getRows();\r\n\r\n    return (\r\n        (rows.length > 1) ?\r\n            <div>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n                        <TableHead className={classes.tableHead}>\r\n                            <TableRow>\r\n                                <TableCell className={classes.tableCell}>CURRENCY</TableCell>\r\n                                <TableCell className={classes.tableCell}>RATE</TableCell>\r\n                                <TableCell className={classes.tableCell}>BID</TableCell>\r\n                                <TableCell className={classes.tableCell}>ASK</TableCell>\r\n                                <TableCell className={classes.tableCell}>HIGH</TableCell>\r\n                                <TableCell className={classes.tableCell}>LOW</TableCell>\r\n                                <TableCell className={classes.tableCell}>OPEN</TableCell>\r\n                                <TableCell className={classes.tableCell}>CLOSE</TableCell>\r\n                                <TableCell className={classes.tableCell}>TIME STAMP</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody className={classes.tableBody}>\r\n                            <RateRows rows={rows} page={page} rowsPerPage={rowsPerPage}></RateRows>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[10, 15, 20]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </div> :\r\n            <CircularIndeterminate />\r\n    );\r\n}\r\n","import React from 'react';\nimport RatesTable from './pages/RatesTable';\n\nfunction App() {\n  return (\n    <RatesTable></RatesTable>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}